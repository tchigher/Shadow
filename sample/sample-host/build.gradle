apply plugin: 'com.android.application'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION

    defaultConfig {
        applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }

    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/samplePluginManager/debug/')
            assets.srcDir('build/generated/assets/samplePlugins/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/samplePluginManager/release/')
            assets.srcDir('build/generated/assets/samplePlugins/release/')
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation 'commons-io:commons-io:2.6' // sample-host 从 assets 中复制插件用
    implementation 'org.slf4j:slf4j-api:1.7.30'

    implementation 'com.tencent.shadow.core:common'
    implementation 'com.tencent.shadow.dynamic:dynamic-host'
    implementation project(':sample-constant')
    implementation project(':sample-host-lib')
}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
    if (task.name == "generateReleaseAssets") {
        generateAssets(task, 'release')
    }
}

def generateAssets(generateAssetsTask, buildType) {
    def fromPluginManagerApkFile = file(
            "${project(":sample-manager").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "sample-manager-${buildType}.apk"
    )

    generateAssetsTask.dependsOn createCopyTask(
            ':sample-manager',
            buildType,
            'samplePluginManager',
            'samplePluginManager.apk',
            fromPluginManagerApkFile,
            "assemble${buildType.capitalize()}"
    )

    def fromPluginsZipFile = file(
            "${getRootProject().getBuildDir()}" +
                    "/samplePlugins-${buildType}.zip"
    )

    generateAssetsTask.dependsOn createCopyTask(
            ':sample-plugin-app',
            buildType,
            'samplePlugins',
            "samplePlugins-${buildType}.zip",
            fromPluginsZipFile,
            "package${buildType.capitalize()}Plugin"
    )
}

def createCopyTask(
        projectName,
        buildType,
        dirNameInAssets,
        outputFileName,
        inputFile,
        taskName
) {
    def outputFile = file("${getBuildDir()}/generated/assets/${dirNameInAssets}/${buildType}/${outputFileName}")
    outputFile.getParentFile().mkdirs()
    return tasks.create("copy${buildType.capitalize()}${dirNameInAssets.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制到 assets/${dirNameInAssets} 中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:${taskName}")
}


